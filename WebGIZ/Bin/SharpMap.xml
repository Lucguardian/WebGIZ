<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpMap</name>
    </assembly>
    <members>
        <member name="T:SharpMap.Rendering.Thematics.ITheme">
            <summary>
            Interface for rendering a thematic layer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ITheme.GetColorByAttribute(System.Object)">
            <summary>
            Returns the color based on the attribute
            </summary>
            <param name="attribute">Attribute to calculate color from</param>
            <returns>Color</returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.WktStreamTokenizer">
            <summary>
            Reads a stream of Well Known Text (wkt) string and returns a stream of tokens.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.IO.StreamTokenizer">
            <summary>
            The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment style
            </summary>
            <remarks>
            This is a crude c# implementation of Java's <a href="http://java.sun.com/products/jdk/1.2/docs/api/java/io/StreamTokenizer.html">StreamTokenizer</a> class.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamTokenizer class.
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetNumericValue">
            <summary>
            If the current token is a number, this field contains the value of that number. 
            </summary>
            <remarks>
            If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER.
            </remarks>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetStringValue">
            <summary>
            If the current token is a word token, this field contains a string giving the characters of the word token. 
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetTokenType">
            <summary>
            Gets the token type of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Returns the next token.
            </summary>
            <param name="ignoreWhitespace">Determines is whitespace is ignored. True if whitespace is to be ignored.</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken">
            <summary>
            Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            Determines a characters type (e.g. number, symbols, character).
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Returns next token that is not whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.LineNumber">
            <summary>
            The current line number of the stream being read.
            </summary>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.Column">
            <summary>
            The current column number of the stream being read.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class ais in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains </param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks it is what is expected.
            </summary>
            <param name="expectedToken">The expected token.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a string inside double quotes.
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadAuthority(System.String@,System.String@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:SharpMap.Styles.Style">
            <summary>
            Defines a style used for for defining layer styles
            </summary>
        </member>
        <member name="T:SharpMap.Styles.IStyle">
            <summary>
            Defines an interface for defining layer styles
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.Enabled">
            <summary>
            Gets or sets whether objects in this style is rendered or not
            </summary>
        </member>
        <member name="M:SharpMap.Styles.Style.#ctor">
            <summary>
            Initializes a style as sets Min=0, Max=double.MaxValue and Visible=true
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.Enabled">
            <summary>
            Specified whether style is rendered or not
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.VectorRenderer">
            <summary>
            This class renders individual geometry features to a graphics object using the settings of a map object.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiLineString(System.Drawing.Graphics,SharpMap.Geometries.MultiLineString,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a MultiLineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="lines">MultiLineString to be rendered</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineString(System.Drawing.Graphics,SharpMap.Geometries.LineString,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPolygon(System.Drawing.Graphics,SharpMap.Geometries.MultiPolygon,System.Drawing.Brush,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a multipolygon byt rendering each polygon in the collection by calling DrawPolygon.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pols">MultiPolygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPolygon(System.Drawing.Graphics,SharpMap.Geometries.Polygon,System.Drawing.Brush,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a polygon to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pol">Polygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLabel(System.Drawing.Graphics,SharpMap.Geometries.Point,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Color,System.Single,System.String,SharpMap.Map)">
            <summary>
            Renders a label to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="LabelPoint">Label placement</param>
            <param name="Offset">Offset of label in screen coordinates</param>
            <param name="font">Font used for rendering</param>
            <param name="forecolor">Font forecolor</param>
            <param name="rotation">Text rotation in degrees</param>
            <param name="text">Text to render</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.clipPolygon(System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Clips a polygon to the view.
            Based on UMN Mapserver renderer
            </summary>
            <param name="vertices">vertices in image coordinates</param>
            <param name="width">Width of map in image coordinates</param>
            <param name="height">Height of map in image coordinates</param>
            <returns>Clipped polygon</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(System.Drawing.Graphics,SharpMap.Geometries.Point,System.Drawing.Bitmap,SharpMap.Map)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientTheme">
            <summary>
            The GradientTheme class defines a gradient color thematic rendering of features based by a numeric attribute.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.#ctor(System.String,System.Double,System.Double,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the IndividualTheme class
            </summary>
            <param name="columnName">Name of column to extract the attribute</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <param name="minColor">Color for minimum value</param>
            <param name="maxColor">Color for maximum value</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.GetColorByAttribute(System.Object)">
            <summary>
            Returns the color based on an attribute value
            </summary>
            <param name="attribute">Attribute</param>
            <returns>Color calculated as a mix of the min/max colors based on a linear calculation based on the min/max values</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.ColumnName">
            <summary>
            Gets or sets the column name from where to get the attribute value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.Min">
            <summary>
            Gets or sets the minimum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.Max">
            <summary>
            Gets or sets the maximum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.MinColor">
            <summary>
            Gets or sets the color for the minimum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.MaxColor">
            <summary>
            Gets or sets the color for the maximum value
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.TokenType">
            <summary>
            Represents the type of token created by the StreamTokenizer class.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eol">
            <summary>
            Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eof">
            <summary>
            Indicates that the end of the input stream has been reached.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Whitespace">
            <summary>
            Indictaes that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Symbol">
            <summary>
            Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Polygon">
            <summary>
            A Polygon is a planar Surface, defined by 1 exterior boundary and 0 or more interior boundaries. Each
            interior boundary defines a hole in the Polygon.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Surface">
            <summary>
            A Surface is a two-dimensional geometric object.
            </summary>
            <remarks>
            The OpenGIS Abstract Specification defines a simple Surface as consisting of a single ‘patch’ that is
            associated with one ‘exterior boundary’ and 0 or more ‘interior’ boundaries. Simple surfaces in threedimensional
            space are isomorphic to planar surfaces. Polyhedral surfaces are formed by ‘stitching’ together
            simple surfaces along their boundaries, polyhedral surfaces in three-dimensional space may not be planar as
            a whole.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.Geometry">
            <summary>
            Geometry is the root class of the hierarchy. Geometry is an abstract (non-instantiable) class.
            The instantiable subclasses of Geometry defined in the specification are restricted to 0, 1 and twodimensional
            geometric objects that exist in two-dimensional coordinate space (R^2).<br/>
            All instantiable geometry classes described in this specification are defined so that valid instances of a
            geometry class are topologically closed (i.e. all defined geometries include their boundary).
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.IGeometry">
            <summary>
            Defines basic interface for a Geometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Envelope">
            <summary>
            The minimum bounding box for this Geometry, returned as a Geometry. The
            polygon is defined by the corner points of the bounding box ((MINX, MINY), (MAXX, MINY), (MAXX,
            MAXY), (MINX, MAXY), (MINX, MINY)).
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns>BoundingBox for this geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.AsText">
            <summary>
            Exports this Geometry to a specific well-known text representation of Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.AsBinary">
            <summary>
            Exports this Geometry to a specific well-known binary representation of Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.ToString">
            <summary>
            Returns a WellKnownText representation of the geometry
            </summary>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Relate(SharpMap.Geometries.Geometry,System.String)">
            <summary>
            Returns 'true' if this geometry is spatially related to another Geometry, by testing
            for intersections between the Interior, Boundary and Exterior of the two geometries
            as specified by the values in the intersectionPatternMatrix
            </summary>
            <param name="other">Geometry to relate to</param>
            <param name="intersectionPattern">Intersection Pattern</param>
            <returns>True if spatially related</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Equals(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially equal’ to anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Disjoint(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially disjoint’ from anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially intersects’ anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially touches’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Crosses(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially crosses’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Within(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially within’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially contains’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Overlaps(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially overlaps’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.SRID">
            <summary>
             Returns the Spatial Reference System ID for this Geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Envelope">
            <summary>
            The minimum bounding box for this Geometry, returned as a Geometry. The
            polygon is defined by the corner points of the bounding box ((MINX, MINY), (MAXX, MINY), (MAXX,
            MAXY), (MINX, MAXY), (MINX, MINY)).
            </summary>
            <remarks>The envelope is actually the BoundingBox converted into a polygon.</remarks>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry, returned as a BoundingBox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.AsText">
            <summary>
            Exports this Geometry to a specific well-known text representation of Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.AsBinary">
            <summary>
            Exports this Geometry to a specific well-known binary representation of Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.ToString">
            <summary>
            Returns a WellKnownText representation of the geometry
            </summary>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GeomFromText(System.String,System.Int32)">
            <summary>
            Creates a geometry based on a WellKnownText string
            </summary>
            <param name="WKT">Well-known Text</param>
            <param name="SRID">Spatial Reference ID</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GeomFromWKB(System.Byte[],System.Int32)">
            <summary>
            Creates a geometry based on a WellKnownBinary byte array
            </summary>
            <param name="WKB">Well-known Binary</param>
            <param name="SRID">Spatial Reference ID</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.IsEmpty">
            <summary>
            Returns 'true' if this Geometry is the empty geometry . If true, then this
            Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Equals(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially equal’ to anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Disjoint(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially disjoint’ from anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially intersects’ anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially touches’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Crosses(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially crosses’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Within(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially within’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially contains’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Overlaps(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry ‘spatially overlaps’ anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Relate(SharpMap.Geometries.Geometry,System.String)">
            <summary>
            Returns 'true' if this geometry is spatially related to another Geometry, by testing
            for intersections between the Interior, Boundary and Exterior of the two geometries
            as specified by the values in the intersectionPatternMatrix
            </summary>
            <param name="other">Geometry to relate to</param>
            <param name="intersectionPattern">Intersection Pattern</param>
            <returns>True if spatially related</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.SpatialReference">
            <summary>
            Returns the spatial reference system associated with the geometry. A geometry may not have had a spatial
            reference system defined for it, in which case *spatialRef will be NULL.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension.
            </summary>
            <remarks>This specification is restricted to geometries in two-dimensional coordinate space.</remarks>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.SRID">
            <summary>
             Returns the Spatial Reference System ID for this Geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this
             Geometry instance is a member. The name of the instantiable subtype of Geometry is returned as a string.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension. This specification is restricted to geometries in two-dimensional coordinate
             space.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor(SharpMap.Geometries.LinearRing,System.Collections.Generic.List{SharpMap.Geometries.LinearRing})">
            <summary>
            Instatiates a polygon based on one extorier ring and a collection of interior rings.
            </summary>
            <param name="exteriorRing">Exterior ring</param>
            <param name="interiorRings">Interior rings</param>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor(SharpMap.Geometries.LinearRing)">
            <summary>
            Instatiates a polygon based on one extorier ring.
            </summary>
            <param name="exteriorRing">Exterior ring</param>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor">
            <summary>
            Instatiates a polygon
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.InteriorRing(System.Int32)">
            <summary>
            Returns the Nth interior ring for this Polygon as a LineString
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.NumInteriorRing">
            <summary>
            Returns the number of interior rings in this Polygon
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the polygon to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>Polygon in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.GetBoundingBox">
            <summary>
            Returns the bounding box of the object
            </summary>
            <returns>bounding box</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.ExteriorRing">
            <summary>
            Gets or sets the exterior ring of this Polygon
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.InteriorRings">
            <summary>
            Gets or sets the interior rings of this Polygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Layer">
            <summary>
            Abstract class for common layer properties
            Implement this class instead of the ILayer interface to save you a lot of common code ;-)
            </summary>
        </member>
        <member name="T:SharpMap.ILayer">
            <summary>
            Interface for map layers
            </summary>
        </member>
        <member name="M:SharpMap.ILayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="P:SharpMap.ILayer.MinVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.ILayer.MaxVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.ILayer.Enabled">
            <summary>
            Specifies whether this layer should be rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.ILayer.LayerName">
            <summary>
            Name of layer
            </summary>
        </member>
        <member name="P:SharpMap.ILayer.LayerType">
            <summary>
            Gets the type of the layer
            </summary>
        </member>
        <member name="P:SharpMap.ILayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToString">
            <summary>
            Returns the name of the layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.Layer.Clone">
            <summary>
            Clones the layer
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="E:SharpMap.Layers.Layer.LayerRendered">
            <summary>
            Event fired when the layer has been rendered
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerName">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.Layer.MinVisible">
            <summary>
            Minimum visibility zoom, including this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.MaxVisible">
            <summary>
            Maximum visibility zoom, excluding this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Enabled">
            <summary>
            Specified whether the layer is rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerType">
            <summary>
            Returns the layertype
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Layer.LayerRenderedEventHandler">
            <summary>
            EventHandler for event fired when the layer has been rendered
            </summary>
            <param name="layer">Layer rendered</param>
            <param name="g">Reference to graphics object used for rendering</param>
        </member>
        <member name="T:SharpMap.Layers.Exceptions.RenderException">
            <summary>
            Exception thrown when a layer rendering fails
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Exceptions.RenderException.#ctor">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Exceptions.RenderException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SharpMap.Layers.Exceptions.RenderException.#ctor(System.String,System.Exception)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:SharpMap.Styles.VectorStyle">
            <summary>
            Defines a style used for rendering vector data
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.#ctor">
            <summary>
            Initializes a new VectorStyle and sets the default values
            </summary>
            <remarks>
            Default values when inialized:<br/>
            LineStyle: 1px solid black<br/>
            FillStyle: Solid black<br/>
            Outline: No Outline
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Line">
            <summary>
            Linestyle for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Outline">
            <summary>
            Outline style for line and polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.EnableOutline">
            <summary>
            Specified whether the objects are rendered with or without outlining
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Fill">
            <summary>
            Fillstyle for Polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Symbol">
            <summary>
            Symbol used for rendering points
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.IndividualTheme">
            <summary>
            The IndividualTheme class defines a thematic rendering of features by individual valued buckets.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.IndividualTheme.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IndividualTheme class
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.IndividualTheme.GetColorByAttribute(System.Object)">
            <summary>
            Returns the color based on an attribute value
            </summary>
            <param name="attribute">Attribute</param>
            <returns>Color from bucket that the attribute falls into</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.IndividualTheme.Values">
            <summary>
            Gets or sets the buckets
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.IndividualTheme.DefaultColor">
            <summary>
            Gets or sets the default color when attribute isn't in a bucket
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.IndividualTheme.ColumnName">
            <summary>
            Gets or sets the column name from where to get the attribute value
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.IndividualTheme.Bucket">
            <summary>
            Bucket structure
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Thematics.IndividualTheme.Bucket.Color">
            <summary>
            Color for features in this bucket
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Thematics.IndividualTheme.Bucket.Value">
            <summary>
            Attribute value of objects that is contained in this feature
            </summary>
        </member>
        <member name="T:SharpMap.Providers.ShapeType">
            <summary>
            Shapefile geometries
            </summary>
        </member>
        <member name="T:SharpMap.Providers.ShapeFile">
            <summary>
            Shapefile dataprovider
            </summary>
        </member>
        <member name="T:SharpMap.Providers.IProvider">
            <summary>
            Interface for data providers
            </summary>
        </member>
        <member name="M:SharpMap.Providers.IProvider.GetFeaturesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.IProvider.QueryFeatures(SharpMap.Geometries.Geometry,System.Double)">
            <summary>
            Returns the data associated with all the geometries that is within 'distance' of 'geom'
            </summary>
            <param name="geom"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.IProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Providers.IProvider.GetDataRow(System.Int32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="RowID"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Providers.IProvider.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="P:SharpMap.Providers.IProvider.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Providers.IProvider.Columns">
            <summary>
            Collection of columns in dataset
            </summary>
        </member>
        <member name="F:SharpMap.Providers.ShapeFile.tree">
            <summary>
            Tree used for fast query of data
            </summary>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.#ctor(System.String)">
            <summary>
            ShapeFile DataProvider.
            </summary>
            <param name="filename">Path to shape file</param>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.#ctor(System.String,System.Boolean)">
            <summary>
            ShapeFile DataProvider.
            </summary>
            <remarks>
            If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="FileBasedIndex">Use file-based spatial index</param>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.ParseHeader(System.String)">
            <summary>
            Parses the header of the .shx index file
            </summary>
            <param name="filename">Name of shapefile</param>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.ReadIndex(System.String)">
            <summary>
            Reads the record offset and length from the .shx index file and
            places the information into arrays (_OffsetOfRecord and _LengthOfRecord)
            </summary>
            <param name="filename">name of the Shapefile. (ie. "blah.shp")</param>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.SwitchByteOrder(System.Int32)">
            <summary>
            Reverses the byte order of an integer (int32 only) 
            (big ->little or little ->big)
            </summary>
             <param name="i">The int32 integer to byte swap</param>
             <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.CreateSpatialIndexFromFile(System.String)">
            <summary>
            Loads a spatial index from a file. If it doesn't exist, one is created and saved
            </summary>
            <param name="filename"></param>
            <returns>QuadTree index</returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.CreateSpatialIndex(System.String)">
            <summary>
            Generates a spatial index for a specified shape file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.GetAllFeatureBoundingBoxes(System.Int32[])">
            <summary>
            Reads all boundingboxes of features in the shapefile. This is used for spatial indexing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.GetAllFeatures(System.Int32[])">
            <summary>
            Reads all features in the shapefile. Used for indexing...
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.GetFeaturesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries overlapping a BoundingBox
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.QueryFeatures(SharpMap.Geometries.Geometry,System.Double)">
            <summary>
            Returns all objects within a distance of a geometry
            </summary>
            <param name="geom"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.GetFeatureCount">
            <summary>
            Returns the total number of features in the datasource
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.GetDataRow(System.Int32)">
            <summary>
            Gets a datarow from the datasource as the specified index [NOT IMPLEMENTED]
            </summary>
            <param name="RowID"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.ShapeFile.GetExtents">
            <summary>
            Returns the extents of the datasource
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Providers.ShapeFile.Filename">
            <summary>
            Gets or sets the filename of the shapefile
            </summary>
            <remarks>If the filename changes, indexes will be rebuilt</remarks>
        </member>
        <member name="P:SharpMap.Providers.ShapeFile.DefinitionQuery">
            <summary>
            Query that limits the datasource [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="P:SharpMap.Providers.ShapeFile.Columns">
            <summary>
            Returns a colleciton of columns from the datasource [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryFromWKB">
            <summary>
             Converts Well-known Binary representations to <b>Geometry</b> objects.
            </summary>
            <remarks>
            The Well-known Binary format is defined in the OpenGIS Simple Features Specification for SQL.
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Create(System.Byte[])">
            <summary>
            Creates a <b>Geometry</b> from the supplied byte[] containing the Well-known Binary representation.
            </summary>
            <param name="bytes">byte[] containing the Well-known Binary representation.</param>
            <returns>A <b>Geometry</b> bases on the supplied Well-known Binary representation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Create(System.IO.BinaryReader)">
            <summary>
            Creates a <b>Geometry</b> based on the Well-known binary representation.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader">BinaryReader</see> used to read the Well-known binary representation.</param>
            <returns>A <b>Geometry</b> based on the Well-known binary representation.</returns>
        </member>
        <member name="T:SharpMap.Layers.WmsLayer">
            <summary>
            Web Map Service layer
            </summary>
            <example>
            The following example creates a map with a WMS layer the Demis WMS Server
            <code lang="C#">
            myMap = new SharpMap.Map(new System.Drawing.Size(500,250);
            SharpMap.Layers.WmsLayer myLayer = new SharpMap.Layers.WmsLayer("Demis WMS");
            myLayer.WmsResource = "http://www2.demis.nl/mapserver/request.asp?WMTVER=1.1.1&amp;LAYERS=Bathymetry,Countries,Topography,Hillshading,Builtup areas,Coastlines,Waterbodies,Inundated,Rivers,Streams,Railroads,Highways,Roads,Trails,Borders,Cities,Settlements,Spot elevations,Airports,Ocean features&amp;STYLES=&amp;FORMAT=image/png&amp;SRS=EPSG:4326";
            myMap.Layers.Add(myLayer);
            myMap.Center = new SharpMap.Geometries.Point(0, 0);
            myMap.Zoom = 360;
            myMap.MaximumZoom = 360;
            myMap.MinimumZoom = 0.1;
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String)">
            <summary>
            Initializes a new layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.Clone">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ContinueOnError">
            <summary>
            Specifies whether to throw an exception if the Wms request failed, or to just skip the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.LayerType">
            <summary>
            Returns the type of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Credidentials">
            <summary>
            Provides the base authentication interface for retrieving credentials for Web client authentication.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.WmsResource">
            <summary>
            Specifies the URL for retrieving a WMS layer.
            </summary>
            <example>
            http://www.myserver.com/WMSrequest.asp?WMTVER=1.1.1
            </example>
        </member>
        <member name="T:SharpMap.Layers.Layertype">
            <summary>
            Layer type enumeration
            </summary>
        </member>
        <member name="F:SharpMap.Layers.Layertype.Vector">
            <summary>
            Vector
            </summary>
        </member>
        <member name="F:SharpMap.Layers.Layertype.Raster">
            <summary>
            Raster
            </summary>
        </member>
        <member name="F:SharpMap.Layers.Layertype.Wms">
            <summary>
            Web map service
            </summary>
        </member>
        <member name="F:SharpMap.Layers.Layertype.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.BoundingBox">
            <summary>
            Bounding box type with double precision
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a bounding box
            </summary>
            <param name="minX">left</param>
            <param name="minY">bottom</param>
            <param name="maxX">right</param>
            <param name="maxY">top</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Initializes a bounding box
            </summary>
            <param name="lowerLeft">Lower left corner</param>
            <param name="upperRight">Upper right corner</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Geometry})">
            <summary>
            Initializes a new Bounding Box based on the bounds from a set of geometries
            </summary>
            <param name="objects">list of objects</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Collections.Generic.List{SharpMap.Geometries.BoundingBox})">
            <summary>
            Initializes a new Bounding Box based on the bounds from a set of bounding boxes
            </summary>
            <param name="objects">list of objects</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Intersects(SharpMap.Geometries.BoundingBox)">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox)">
            <summary>
            Computes the joined boundingbox of two boundingboxes
            </summary>
            <param name="box">Boundingbox to join with</param>
            <returns>Boundingbox containing both boundingboxes</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.Point)">
            <summary>
            Checks whether a point lies within the bounding box
            </summary>
            <param name="p">Point</param>
            <returns>true if point is within</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.DistSqrd(SharpMap.Geometries.Point)">
            <summary>
            Distance squared to a point from the box (Arvo's algorithm)
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetCentroid">
            <summary>
            Returns the center of the bounding box
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Clone">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.ToString">
            <summary>
            Returns a string representation of the boundingbox as LowerLeft + UpperRight formatted as "MinX,MinY MaxX,MaxY"
            </summary>
            <returns>MinX,MinY MaxX,MaxY</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Min">
            <summary>
            Lower left corner
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Max">
            <summary>
            Upper right corner
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.GetLeft">
            <summary>
            Gets the left boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.GetRight">
            <summary>
            Gets the right boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.GetTop">
            <summary>
            Gets the top boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.GetBottom">
            <summary>
            Gets the bottom boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Width">
            <summary>
            Returns the width of the bounding box
            </summary>
            <returns>Width of boundingbox</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Height">
            <summary>
            Returns the height of the bounding box
            </summary>
            <returns>Height of boundingbox</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.LongestAxis">
            <summary>
            Intersection scalar (used for weighting in building the tree) 
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryToWKT">
            <summary>
            Outputs the textual representation of a Geometry object.
            </summary>
            <remarks>
            <para>The Well-known Text format is defined in the OpenGIS Simple Features Specification for SQL.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.StringOfChar(System.Char,System.Int32)">
            <summary>
            Returns a string of repeated characters.
            </summary>
            <param name="ch">The character to repeat.</param>
            <param name="count">The number of times to repeat the character.</param>
            <returns>Returns a string of repeated characters.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(SharpMap.Geometries.IGeometry)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A Geometry to write.</param>
            <returns>A &lt;Geometry Tagged Text&gt; string (see the OpenGIS Simple
             Features Specification)</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(SharpMap.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A geometry to process.</param>
            <param name="writer">Stream to write out the geometry's text representation.</param>
            <remarks>
            Geometry is written to the output stream as &lt;Gemoetry Tagged Text&gt; string (see the OpenGIS
            Simple Features Specification).
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryTaggedText(SharpMap.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to &lt;Geometry Tagged Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometry">The Geometry to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointTaggedText(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point Tagged Text&gt; format,
            then Appends it to the writer.
            </summary>
            <param name="coordinate">the <code>Coordinate</code> to process</param>
            <param name="writer">the output writer to Append to</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringTaggedText(SharpMap.Geometries.LineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to LineString tagged text format, 
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonTaggedText(SharpMap.Geometries.Polygon,System.IO.StringWriter)">
            <summary>
             Converts a Polygon to &lt;Polygon Tagged Text&gt; format,
             then Appends it to the writer.
            </summary>
            <param name="polygon">Th Polygon to process.</param>
            <param name="writer">The stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointTaggedText(SharpMap.Geometries.MultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Tagged Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multipoint">The MultiPoint to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringTaggedText(SharpMap.Geometries.MultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonTaggedText(SharpMap.Geometries.MultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionTaggedText(SharpMap.Geometries.GeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointText(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to Point Text format then Appends it to the writer.
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendCoordinate(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point&gt; format, then Appends
            it to the writer. 
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.WriteNumber(System.Double)">
            <summary>
            Converts a double to a string, not in scientific notation.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>The double as a string, not in scientific notation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringText(SharpMap.Geometries.LineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to &lt;LineString Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonText(SharpMap.Geometries.Polygon,System.IO.StringWriter)">
            <summary>
            Converts a Polygon to &lt;Polygon Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="polygon">The Polygon to process.</param>
            <param name="writer"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointText(SharpMap.Geometries.MultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="multiPoint">The MultiPoint to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringText(SharpMap.Geometries.MultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonText(SharpMap.Geometries.MultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Text&gt; format, then Appends to it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionText(SharpMap.Geometries.GeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WKBByteOrder">
            <summary>
            Specifies the byte order.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WKBByteOrder.Xdr">
            <summary>
            Big-endian.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WKBByteOrder.Ndr">
            <summary>
            Little-endian.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents a single location in coordinate space. A Point has a x coordinate
            value and a y-coordinate value. The boundary of a Point is the empty set.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor">
            <summary>
            Initializes a new Point at (0,0)
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the point to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Addition(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Vector + Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Subtraction(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Vector - Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns>Cross product</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Multiply(SharpMap.Geometries.Point,System.Double)">
            <summary>
            Vector * Scalar
            </summary>
            <param name="m">Vector</param>
            <param name="d">Scalar (double)</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Addition(SharpMap.Geometries.Point,System.Double)">
            <summary>
            Vector + Scalar (translation)
            </summary>
            <param name="m">Vector</param>
            <param name="d">Scalar (double)</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Boundary">
            <summary>
            The boundary of a point is the empty set.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the distance between this geometry instance and another geometry, as
            measured in the spatial reference system of this instance.
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.Point.X">
            <summary>
            Gets or sets the X coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Y">
            <summary>
            Gets or sets the Y coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Item(System.UInt32)">
            <summary>
            Returns part of coordinate. Index 0 = X, Index 1 = Y
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric collection whose elements are surfaces. The interiors of any
            two surfaces in a MultiSurface may not intersect. The boundaries of any two elements in a MultiSurface may
            intersect at most at a finite number of points.
            </summary>
            <remarks>
            MultiSurface is a non-instantiable class in this specification, it defines a set of methods for its subclasses and
            is included for reasons of extensibility. The instantiable subclass of MultiSurface is MultiPolygon,
            corresponding to a collection of Polygons.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a collection of 1 or more geometries.
            </summary>
            <remarks>
            All the elements in a GeometryCollection must be in the same Spatial Reference. This is also the Spatial
            Reference for the GeometryCollection.<br/>
            GeometryCollection places no other constraints on its elements. Subclasses of GeometryCollection may
            restrict membership based on dimension and may also place other constraints on the degree of spatial overlap
            between elements.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.IGeometryCollection">
            <summary>
            Interface for a GeometryCollection. A GeometryCollection is a collection of 1 or more geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometryCollection.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="P:SharpMap.Geometries.IGeometryCollection.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.#ctor">
            <summary>
            Initializes a new GeometryCollection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.IsEmpty">
            <summary>
            Returns empty of all the geometries are empty or the collection is empty
            </summary>
            <returns>true of collection is empty</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry, returned as a BoundingBox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.NumGeometries">
            <summary>
            Gets the number of geometries in the collection.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.GeometryType">
            <summary>
            Returns GeometryType.GeometryCollection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Collection">
            <summary>
            Gets or sets the GeometryCollection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension.
            </summary>
            <remarks>This specification is restricted to geometries in two-dimensional coordinate space.</remarks>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.#ctor">
            <summary>
            Instantiates a MultiPolygon
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.GetBoundingBox">
            <summary>
            Returns the bounding box of the object
            </summary>
            <returns>bounding box</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Polygons">
            <summary>
            Collection of polygons in the multipolygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry at index</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Area">
            <summary>
            Returns summed area of the Polygons in the MultiPolygon collection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Centroid">
            <summary>
            The mathematical centroid for the surfaces as a Point.
            The result is not guaranteed to be on any of the surfaces.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric collection. The elements of a MultiPoint are
            restricted to Points. The points are not connected or ordered.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.#ctor">
            <summary>
            Initializes a new MultiPoint collection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Boundary">
            <summary>
            The boundary of a MultiPoint is the empty set (null).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Item(System.Int32)">
            <summary>
            Gets the n'th point in the MultiPoint collection
            </summary>
            <param name="n">Index in collection</param>
            <returns>Point</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Points">
            <summary>
            Gets or sets the MultiPoint collection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.BigEndianBinaryWriter">
            <summary>
            Extends the BinaryWriter class to allow the writing of integers in the Big Endian format.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The supplied stream.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryWriter.WriteIntBE(System.Int32)">
            <summary>
            Reads a 2-byte signed integer using the big-endian layout from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <param name="integer">The four-byte signed integer to write.</param>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.BigEndianBinaryReader">
            <summary>
            Binary reader class to allow reading of integers in the Big Endian format.
            </summary>
            <remarks>
            The <see cref="T:System.IO.BinaryReader">BinaryReader</see> uses Little Endian format when reading binary streams.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Converters.WellKnownBinary.BigEndianBinaryReader">BigEndianBinaryReader</see> class based on the supplied stream and using UTF8Encoding.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Converters.WellKnownBinary.BigEndianBinaryReader">BigEndianBinaryReader</see> class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.BigEndianBinaryReader.ReadIntBE">
            <summary>
            Reads a 4-byte signed integer using the big-endian layout from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Geometries.GeometryType">
            <summary>
            Enumeration of Simple Features Geometry types
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.Geometry">
            <summary>
            Geometry is the root class of the hierarchy. Geometry is an abstract (non-instantiable) class.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents a single location in coordinate space.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.Curve">
            <summary>
            A curve is a one-dimensional geometric object usually stored as a sequence of points,
            with the subtype of curve specifying the form of the interpolation between points.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.LineString">
            <summary>
            A LineString is a curve with linear interpolation between points. Each consecutive
            pair of points defines a line segment.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.Surface">
            <summary>
            A Surface is a two-dimensional geometric object.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.Polygon">
            <summary>
            A Polygon is a planar surface, defined by 1 exterior boundary and 0 or more interior
            boundaries. Each interior boundary defines a hole in the polygon.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a collection of 1 or more geometries.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric collection. The elements of a MultiPoint
            are restricted to Points. The points are not connected or ordered.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection whose elements are Curves.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose elements are LineStrings.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric collection whose elements are
            surfaces. The interiors of any two surfaces in a MultiSurface may not intersect.
            The boundaries of any two elements in a MultiSurface may intersect at most at a
            finite number of points.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.ISpatialReference">
            <summary>
            The ISpatialRelation interface defines a set of named spatial relationship operators for geometric shape
            objects. The behavior of these operators is described in detail in the geometry object model sub-section of
            the Architecture section of the OpenGIS Simple Features specification. [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="T:SharpMap.Layers.VectorLayer">
            <summary>
            Class for vector layer properties
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String)">
            <summary>
            Initializes a new layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Clone">
            <summary>
            Clones the layer
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SmoothingMode">
            <summary>
            Render smoothing mode
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Style">
            <summary>
            Gets or sets the rendering style of the vector layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.LayerType">
            <summary>
            Returns the type of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Create(System.String)">
            <summary>
            Converts a Well-known text representation to a Geometry.
            </summary>
            <param name="wellKnownText">A Geometry tagged text string ( see the OpenGIS Simple Features Specification.</param>
            <returns>Returns a Geometry specified by wellKnownText.  Throws an exception if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Create(System.IO.TextReader)">
            <summary>
            Converts a Well-known Text representation to a Geometry.
            </summary>
            <param name="reader">A Reader which will return a Geometry Tagged Text
            string (see the OpenGIS Simple Features Specification)</param>
            <returns>Returns a Geometry read from StreamReader.  An exception will be thrown if there is a
            parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetCoordinates(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next array of Coordinates in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The
            next element returned by the stream should be "(" (the beginning of "(x1 y1, x2 y2, ..., xn yn)" or
            "EMPTY".</param>
            <returns>The next array of Coordinates in the stream, or an empty array of "EMPTY" is the
            next element returned by the stream.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextNumber(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next number in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known text format.  The next token
            must be a number.</param>
            <returns>Returns the next number in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not a number.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextEmptyOrOpener(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next "EMPTY" or "(" in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be "EMPTY" or "(".</param>
            <returns>the next "EMPTY" or "(" in the stream as uppercase
            text.</returns>
            <remarks>
            ParseException is thrown if the next token is not "EMPTY" or "(".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloserOrComma(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" or "," in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next token must be ")" or ",".</param>
            <returns>Returns the next ")" or "," in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")" or ",".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloser(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")".</param>
            <returns>Returns the next ")" in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextWord(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next word in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be a word.</param>
            <returns>Returns the next word in the stream as uppercase text.</returns>
            <remarks>
            Exception is thrown if the next token is not a word.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryTaggedText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Geometry using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Geometry Tagged Text&gt;.</param>
            <returns>Returns a Geometry specified by the next token in the stream.</returns>
            <remarks>
            Exception is thrown if the coordinates used to create a Polygon
            shell and holes do not form closed linestrings, or if an unexpected
            token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
              Creates a <code>MultiPolygon</code> using the next token in the stream.
            
            @param  tokenizer        tokenizer over a stream of text in Well-known Text
                  format. The next tokens must form a &lt;MultiPolygon Text&gt;.
            @return                  a <code>MultiPolygon</code> specified by the next
                  token in the stream, or if if the coordinates used to create the
                  <code>Polygon</code> shells and holes do not form closed linestrings.
            @throws  IOException     if an I/O error occurs
            @throws  ParseException  if an unexpected token was encountered
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Polygon using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
             format. The next tokens must form a &lt;Polygon Text&gt;.</param>
            <returns>Returns a Polygon specified by the next token
             in the stream</returns>
             <remarks>
             ParseException is thown if the coordinates used to create the Polygon
             shell and holes do not form closed linestrings, or if an unexpected
             token is encountered.
             </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
              Creates a <code>MultiLineString</code> using the next token in the stream.
            
            @param  tokenizer        tokenizer over a stream of text in Well-known Text
                  format. The next tokens must form a &lt;MultiLineString Text&gt;.
            @return                  a <code>MultiLineString</code> specified by the
                  next token in the stream
            @throws  IOException     if an I/O error occurs
            @throws  ParseException  if an unexpected token was encountered
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a LineString using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The next
            tokens must form a LineString Text.</param>
            <returns>Returns a LineString specified by the next token in the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose elements are LineStrings.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection whose elements are Curves
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiCurve.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.IsClosed">
            <summary>
            Returns true if this MultiCurve is closed (StartPoint=EndPoint for each curve in this MultiCurve)
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.Length">
            <summary>
            The Length of this MultiCurve which is equal to the sum of the lengths of the element Curves.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.#ctor">
            <summary>
            Initializes an instance of a MultiLineString
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.LineStrings">
            <summary>
            Collection of polygons in the multipolygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry at index</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.IsClosed">
            <summary>
            Returns true if all LineStrings in this MultiLineString is closed (StartPoint=EndPoint for each LineString in this MultiLineString)
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.Length">
            <summary>
            The length of this MultiLineString which is equal to the sum of the lengths of the element LineStrings.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates">
            <summary>
            Helper class for serializing System.Drawing.Pen and System.Drawing.Brush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.GetSurrogateSelectors">
            <summary>
            Gets the surrogate selecteds for System.Drawing.Pen and System.Drawing.Brush
            </summary>
            <returns>SurrogateSelector</returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.SolidBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.SolidBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.TextureBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.TextureBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.PenSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Pen
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.MatrixSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Drawing2D.Matrix
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Providers.PostGIS">
            <summary>
            PostGreSQL / PostGIS dataprovider
            </summary>
            <example>
            Adding a datasource to a layer:
            <code>
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = "Server=127.0.0.1;Port=5432;User Id=postgres;Password=password;Database=myGisDb;";
            myLayer.DataSource = new SharpMap.Providers.PostGIS(ConnStr, "myTable");
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to PostGIS
            </summary>
            <param name="ConnectionStr">Connectionstring</param>
            <param name="tablename">Name of data table</param>
            <param name="geometryColumnName">Name of geometry column</param>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.#ctor(System.String,System.String)">
            <summary>
            Initializes a new connection to PostGIS
            </summary>
            <param name="ConnectionStr">Connectionstring</param>
            <param name="tablename">Name of data table</param>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.GetFeaturesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.QueryFeatures(SharpMap.Geometries.Geometry,System.Double)">
            <summary>
            Returns all objects within a distance of a geometry
            </summary>
            <param name="geom"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.WktToLineString(System.String)">
            <summary>
            Convert WellKnownText to linestrings
            </summary>
            <param name="WKT"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.GetGeometryColumn">
            <summary>
            Queries the PostGIS database to get the name of the Geometry Column. This is used if the columnname isn't specified in the constructor
            </summary>
            <remarks></remarks>
            <returns>Name of column containing geometry</returns>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.GetDataRow(System.Int32)">
            <summary>
            Returns a datarow based on a RowID [NOT IMPLEMENTED]
            </summary>
            <param name="RowID"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Providers.PostGIS.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="P:SharpMap.Providers.PostGIS.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Providers.PostGIS.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Providers.PostGIS.GeometryColumn">
            <summary>
            Name of geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Providers.PostGIS.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Providers.PostGIS.Columns">
            <summary>
            Gets a collection of columns in the dataset
            </summary>
        </member>
        <member name="P:SharpMap.Providers.PostGIS.SRID">
            <summary>
            Spacial Reference ID
            </summary>
        </member>
        <member name="T:SharpMap.Map">
            <summary>
            Map class
            </summary>
            <example>
            Creating a new map instance, adding layers and rendering the map:
            <code lang="C#">
            SharpMap.Map myMap = new SharpMap.Map(picMap.Size);
            myMap.MinimumZoom = 100;
            myMap.BackgroundColor = Color.White;
            
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = "Server=127.0.0.1;Port=5432;User Id=postgres;Password=password;Database=myGisDb;";
            myLayer.DataSource = new SharpMap.Providers.PostGIS(ConnStr, "myTable", "the_geom", 32632);
            myLayer.FillStyle = new SolidBrush(Color.FromArgb(240,240,240)); //Applies to polygon types only
            myLayer.OutlineStyle = new Pen(Color.Blue, 1); //Applies to polygon and linetypes only
            //Setup linestyle (applies to line types only)
            myLayer.Style.Line.Width = 2;
            myLayer.Style.Line.Color = Color.Black;
            myLayer.Style.Line.EndCap = System.Drawing.Drawing2D.LineCap.Round; //Round end
            myLayer.Style.Line.StartCap = layRailroad.LineStyle.EndCap; //Round start
            myLayer.Style.Line.DashPattern = new float[] { 4.0f, 2.0f }; //Dashed linestyle
            myLayer.Style.EnableOutline = true;
            myLayer.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias; //Render smooth lines
            myLayer.MaxVisible = 40000;
            
            myMap.Layers.Add(myLayer);
            // [add more layers...]
            
            myMap.Center = new SharpMap.Geometries.Point(725000, 6180000); //Set center of map
            myMap.Zoom = 1200; //Set zoom level
            myMap.Size = new System.Drawing.Size(300,200); //Set output size
            
            System.Drawing.Image imgMap = myMap.GetMap(); //Renders the map
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Map.numberFormat_EnUS">
            <summary>
            Used for converting numbers to/from strings
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new map
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SharpMap.Map.Dispose">
            <summary>
            Disposed the map object
            </summary>
        </member>
        <member name="M:SharpMap.Map.GetMap">
            <summary>
            Renders the map to an image
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Map.FindLayer(System.String)">
            <summary>
            Returns an enumerable for all layers containing the search parameter in the LayerName property
            </summary>
            <param name="layername">Search parameter</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:SharpMap.Map.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Map.GetExtents">
            <summary>
            Gets the extents of the map based on the layers
            </summary>
            <returns>Extents</returns>
        </member>
        <member name="M:SharpMap.Map.ZoomToExtents">
            <summary>
            Zooms to the extents of all layers
            </summary>
        </member>
        <member name="M:SharpMap.Map.ZoomToBox(SharpMap.Geometries.BoundingBox)">
            <summary>
            Zooms the map to fit a bounding box
            </summary>
            <param name="bbox"></param>
        </member>
        <member name="E:SharpMap.Map.LayerAdded">
            <summary>
            Event fired when the layer has been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRemoved">
            <summary>
            Event fired when the layer has been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapRendered">
            <summary>
            Event fired when all layers have been rendered
            </summary>
        </member>
        <member name="P:SharpMap.Map.Envelope">
            <summary>
            Gets the extents of the current map
            </summary>
        </member>
        <member name="P:SharpMap.Map.Layers">
            <summary>
            A collection of layers. The first layer in the list is drawn first, the last one on top.
            </summary>
        </member>
        <member name="P:SharpMap.Map.BackColor">
            <summary>
            Map background color (defaults to transparent)
            </summary>
        </member>
        <member name="P:SharpMap.Map.Center">
            <summary>
            Center of map in WCS
            </summary>
        </member>
        <member name="P:SharpMap.Map.Zoom">
            <summary>
            Zoom level of map. This corrosponds to the width of the map in WCS units.
            </summary>
        </member>
        <member name="P:SharpMap.Map.PixelSize">
            <summary>
            Returns the size of a pixel
            </summary>
        </member>
        <member name="P:SharpMap.Map.MapHeight">
            <summary>
            Height of map in world units
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Map.Size">
            <summary>
            Size of output map
            </summary>
        </member>
        <member name="P:SharpMap.Map.MinimumZoom">
            <summary>
            Minimum zoom amount allowed
            </summary>
        </member>
        <member name="P:SharpMap.Map.MaximumZoom">
            <summary>
            Maximum zoom amount allowed
            </summary>
        </member>
        <member name="T:SharpMap.Map.LayerAddedEventHandler">
            <summary>
            EventHandler for event fired when a layer has been added to the Layers collections
            </summary>
        </member>
        <member name="T:SharpMap.Map.LayerRemovedEventHandler">
            <summary>
            EventHandler for event fired when a layer has been removed from the Layers collection
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapRenderedEventHandler">
            <summary>
            EventHandler for event fired when all layers have been rendered
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WKBGeometryType">
            <summary>
            Enumeration to determine geometrytype in Well-known Binary
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Providers">
            <summary>
            Provider helper utilities
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.GetProviders">
            <summary>
            Returns a list of available data providers
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.MyInterfaceFilter(System.Type,System.Object)">
            <summary>
            Filter method used for searching for objects in an assembly
            </summary>
            <param name="typeObj"></param>
            <param name="criteriaObj"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.Heuristic">
            <summary>
            Heuristics used for tree generation
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.maxdepth">
            <summary>
            Maximum tree depth
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.mintricnt">
            <summary>
            Minimum object count at node
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.tartricnt">
            <summary>
            Target object count at node
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.minerror">
            <summary>
            Minimum Error metric – the volume of a box + a unit cube.
            The unit cube in the metric prevents big boxes that happen to be flat having a zero result and muddling things up.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree">
            <summary>
            Constructs a Quad-tree node from a object list and creates its children recursively
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._Depth">
            <summary>
            Nodes depth in a tree
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._ID">
            <summary>
            Node ID
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor(System.Collections.Generic.List{SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects},System.UInt32,SharpMap.Utilities.SpatialIndexing.Heuristic)">
            <summary>
            Creates a node and either splits the objects recursively into sub-nodes, or stores them at the node depending on the heuristics.
            Tree is built top->down
            </summary>
            <param name="objList">Geometries to index</param>
            <param name="depth">Current depth of tree</param>
            <param name="heurdata">Heuristics data</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor">
            <summary>
            This instantiator is used internally for loading a tree from a file
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.FromFile(System.String)">
            <summary>
            Loads a quadtree from a file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ReadNode(System.UInt32,System.IO.BinaryReader@)">
            <summary>
            Reads a node from a stream recursively
            </summary>
            <param name="depth">Current depth</param>
            <param name="br">Binary reader reference</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveIndex(System.String)">
            <summary>
            Saves the Quadtree to a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveNode(SharpMap.Utilities.SpatialIndexing.QuadTree,System.IO.BinaryWriter@)">
            <summary>
            Saves a node to a stream recursively
            </summary>
            <param name="node">Node to save</param>
            <param name="sw">Reference to BinaryWriter</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ErrorMetric(SharpMap.Geometries.BoundingBox)">
            <summary>
            Calculate the floating point error metric 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Dispose">
            <summary>
            Disposes the node
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.IntersectTree(SharpMap.Geometries.BoundingBox,SharpMap.Utilities.SpatialIndexing.QuadTree,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Recursive function that traverses the tree and looks for intersections with a boundingbox
            </summary>
            <param name="box">Boundingbox to intersect with</param>
            <param name="node">Node to search from</param>
            <param name="list">List of found intersections</param>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.IsLeaf">
            <summary>
            Determines whether the node is a leaf (if data is stored at the node, we assume the node is a leaf)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Box">
            <summary>
            Gets/sets the Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child0">
            <summary>
            Gets/sets the left child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child1">
            <summary>
            Gets/sets the right child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Depth">
            <summary>
            Gets the depth of the current node in the tree
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects">
            <summary>
            BoundingBox and Feature ID structure used for storing in the quadtree 
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.box">
            <summary>
            Boundingbox
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.ID">
            <summary>
            Feature ID
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Transform">
            <summary>
            Class for transforming between world and image coordinate
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldtoMap(SharpMap.Geometries.Point,SharpMap.Map)">
            <summary>
            Transforms from world coordinate system (WCS) to image coordinates
            </summary>
            <param name="p">Point in WCS</param>
            <param name="map">Map reference</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF,SharpMap.Map)">
            <summary>
            Transforms from image coordinates to world coordinate system (WCS)
            </summary>
            <param name="p">Point in image coordinate system</param>
            <param name="map">Map reference</param>
            <returns>Point in WCS</returns>
        </member>
        <member name="T:SharpMap.Geometries.Curve">
            <summary>
            A Curve is a one-dimensional geometric object usually stored as a sequence of points,
            with the subtype of Curve specifying the form of the interpolation between points.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Curve.StartPoint">
            <summary>
            The start point of this Curve.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Curve.EndPoint">
            <summary>
            The end point of this Curve.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Curve.Value(System.Double)">
            <summary>
            The position of a point on the line, parameterised by length.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Curve.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.Length">
            <summary>
            The length of this Curve in its associated spatial reference.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.IsClosed">
            <summary>
            Returns true if this Curve is closed (StartPoint = EndPoint).
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.IsRing">
            <summary>
            true if this Curve is closed (StartPoint = EndPoint) and
            this Curve is simple (does not pass through the same point more than once).
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapImage">
            <summary>
            MapImage Class - MapImage control for Windows forms
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapImage.#ctor">
            <summary>
            Initializes a new map
            </summary>
        </member>
        <member name="M:SharpMap.Forms.MapImage.Refresh">
            <summary>
            Refreshes the map
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapImage.Map">
            <summary>
            Map reference
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapImage.QueryLayerIndex">
            <summary>
            Gets or sets the index of the active query layer 
            </summary>
        </member>
        <member name="P:SharpMap.Forms.MapImage.ActiveTool">
            <summary>
            Sets the active map tool
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MouseMove">
            <summary>
            Fires when mouse moves over the map
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MouseDown">
            <summary>
            Fires when map received a mouseclick
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MouseUp">
            <summary>
            Fires when mouse is released
            </summary>		
        </member>
        <member name="E:SharpMap.Forms.MapImage.MouseDrag">
            <summary>
            Fired when mouse is dragging
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MapRefreshed">
            <summary>
            Fired when the map has been refreshed
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MapZoomChanged">
            <summary>
            Fired when the zoom value has changed
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MapZooming">
            <summary>
            Fired when the map is being zoomed
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MapQueried">
            <summary>
            Fired when the map is queried
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.MapCenterChanged">
            <summary>
            Fired when the center of the map has changed
            </summary>
        </member>
        <member name="E:SharpMap.Forms.MapImage.ActiveToolChanged">
            <summary>
            Fired when the active map tool has changed
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapImage.Tools">
            <summary>
            Map tools enumeration
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapImage.Tools.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapImage.Tools.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapImage.Tools.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapImage.Tools.Query">
            <summary>
            Query tool
            </summary>
        </member>
        <member name="F:SharpMap.Forms.MapImage.Tools.None">
            <summary>
            No active tool
            </summary>
        </member>
        <member name="T:SharpMap.Forms.MapImage.MouseEventHandler">
            <summary>
            MouseEventtype fired from the MapImage control
            </summary>
            <param name="WorldPos"></param>
            <param name="ImagePos"></param>
        </member>
        <member name="T:SharpMap.Forms.MapImage.MapZoomHandler">
            <summary>
            Eventtype fired when the zoom was or are being changed
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="T:SharpMap.Forms.MapImage.MapQueryHandler">
            <summary>
            Eventtype fired when the map is queried
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:SharpMap.Forms.MapImage.MapCenterChangedHandler">
            <summary>
            Eventtype fired when the center has changed
            </summary>
            <param name="center"></param>
        </member>
        <member name="T:SharpMap.Forms.MapImage.ActiveToolChangedHandler">
            <summary>
            Eventtype fired when the map tool is changed
            </summary>
            <param name="tool"></param>
        </member>
        <member name="T:SharpMap.Web.Caching">
            <summary>
            Class for storing rendered images in the httpcache
            </summary>
        </member>
        <member name="M:SharpMap.Web.Caching.InsertIntoCache(System.Int32,System.Drawing.Image)">
            <summary>
            Inserts an image into the HttpCache and returns the cache identifier.
            </summary>
            <remarks>
            Image can after insertion into the cache be requested by calling getmap.aspx?ID=[identifier]<br/>
            This requires you to add the following to web.config:
            <code escaped="true">
            <httpHandlers>
               <add verb="*" path="GetMap.aspx" type="SharpMap.Web.HttpHandler,SharpMap"/>
            </httpHandlers>
            </code>
            <example>
            Inserting the map into the cache and setting the ImageUrl:
            <code>
            string imgID = SharpMap.Web.Caching.CacheMap(5, myMap.GetMap(), Session.SessionID, Context);
            imgMap.ImageUrl = "getmap.aspx?ID=" + HttpUtility.UrlEncode(imgID);
            </code>
            </example>
            </remarks>
            <param name="minutes">Number of minutes to cache the map</param>
            <param name="map">Map reference</param>
            <returns>Image identifier</returns>
        </member>
        <member name="M:SharpMap.Utilities.Algorithms.IsCCW(SharpMap.Geometries.LinearRing)">
            <summary>
            Tests whether a ring is oriented counter-clockwise.
            </summary>
            <param name="ring">Ring to test.</param>
            <returns>Returns true if ring is oriented counter-clockwise.</returns>
        </member>
        <member name="T:SharpMap.Geometries.LinearRing">
            <summary>
            A LinearRing is a LineString that is both closed and simple.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.LineString">
            <summary>
            A LineString is a Curve with linear interpolation between points. Each consecutive pair of points defines a
            line segment.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Initializes an instance of a LineString from a set of vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor">
            <summary>
            Initializes an instance of a LineString
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Point(System.Int32)">
            <summary>
            Returns the specified point N in this Linestring.
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the linestring to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>Linestring in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.StartPoint">
            <summary>
            Returns the vertice where this Geometry begins
            </summary>
            <returns>First vertice in LineString</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.EndPoint">
            <summary>
            Returns the vertice where this Geometry ends
            </summary>
            <returns>Last vertice in LineString</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Value(System.Double)">
            <summary>
            The position of a point on the line, parameterised by length.
            </summary>
            <param name="t">Distance down the line</param>
            <returns>Point at line at distance t from StartPoint</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns>BoundingBox for this geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.Vertices">
            <summary>
            Gets or sets the collection of vertices in this Geometry
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.NumPoints">
            <summary>
            The number of points in this LineString.
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
        </member>
        <member name="P:SharpMap.Geometries.LineString.GeometryType">
            <summary>
             Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.IsRing">
            <summary>
            Returns true if this LineString is closed and simple
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.Length">
            <summary>
            The length of this LineString, as measured in the spatial reference system of this LineString.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Initializes an instance of a LinearRing from a set of vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor">
            <summary>
            Initializes an instance of a LinearRing
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.IsCCW">
            <summary>
            Tests whether a ring is oriented counter-clockwise.
            </summary>
            <returns>Returns true if ring is oriented counter-clockwise.</returns>
        </member>
        <member name="P:SharpMap.Geometries.LinearRing.Area">
            <summary>
            Returns the area of the LinearRing
            </summary>
        </member>
        <member name="T:SharpMap.Web.HttpHandler">
            <summary>
            HttpHandler class for web applications
            </summary>
        </member>
        <member name="M:SharpMap.Web.HttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Returns the requested image in an http imagestream
            </summary>
            <param name="context">HttpContext</param>
        </member>
        <member name="P:SharpMap.Web.HttpHandler.IsReusable">
            <summary>
            Enable Http pooling
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle">
            <summary>
            Defines a style used for rendering labels
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.#ctor">
            <summary>
            Initializes a new LabelStyle
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Font">
            <summary>
            Label Font
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.ForeColor">
            <summary>
            Font color
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Offset">
            <summary>
            Specifies relative position of labels with respect to objects label point
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionDetection">
            <summary>
            Gets or sets whether Collision Detection is enabled for the labels.
            If set to true, label collision will be tested.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionBuffer">
            <summary>
            Distance around label where collision buffer is active
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryToWKB">
            <summary>
             Converts a Well-known Binary string to a Geometry.
            </summary>
            <remarks>The Well-known
             <para>Binary format is defined in the 
             OpenGIS Simple Features Specification for SQL</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(SharpMap.Geometries.Geometry)">
            <summary>
            Writes a geometry to a byte array
            </summary>
            <param name="g">The geometry used by this method.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteType(SharpMap.Geometries.Geometry,System.IO.BinaryWriter)">
            <summary>
            Writes the type number for this geometry.
            </summary>
            <param name="geometry">The geometry to determine the type of.</param>
            <param name="bWriter">Binary Writer</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometry(SharpMap.Geometries.Geometry,System.IO.BinaryWriter)">
            <summary>
            Writes the geometry to the binary writer.
            </summary>
            <param name="geometry">The geometry to be written.</param>
            <param name="bWriter"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePoint(SharpMap.Geometries.Point,System.IO.BinaryWriter)">
            <summary>
            Writes a point.
            </summary>
            <param name="point">The point to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteLineString(SharpMap.Geometries.LineString,System.IO.BinaryWriter)">
            <summary>
            Writes a linestring.
            </summary>
            <param name="ls">The linestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePolygon(SharpMap.Geometries.Polygon,System.IO.BinaryWriter)">
            <summary>
            Writes a polygon.
            </summary>
            <param name="poly">The polygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPoint(SharpMap.Geometries.MultiPoint,System.IO.BinaryWriter)">
            <summary>
            Writes a multipoint.
            </summary>
            <param name="mp">The multipoint to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiLineString(SharpMap.Geometries.MultiLineString,System.IO.BinaryWriter)">
            <summary>
            Writes a multilinestring.
            </summary>
            <param name="mls">The multilinestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPolygon(SharpMap.Geometries.MultiPolygon,System.IO.BinaryWriter)">
            <summary>
            Writes a multipolygon.
            </summary>
            <param name="mp">The mulitpolygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometryCollection(SharpMap.Geometries.GeometryCollection,System.IO.BinaryWriter)">
            <summary>
            Writes a geometrycollection.
            </summary>
            <param name="gc">The geometrycollection to be written.</param>
            <param name="bWriter">Stream to write to.</param>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer">
            <summary>
            Label layer (NOT IMPLEMENTED)
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.#ctor">
            <summary>
            Creates a new instance of a LabelLayer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Clone">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SmoothingMode">
            <summary>
            Render smoothing mode
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Style">
            <summary>
            Gets or sets the rendering style of the label layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelColumn">
            <summary>
            TODO:
            Data column or expression where label text is extracted from
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.RotationColumn">
            <summary>
            TODO:
            Data column or expression from where the label rotation is derived.
            If this is empty, rotation will be zero, or aligned to a linestring
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LayerType">
            <summary>
            Gets the type of the layer
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.SpatialRelations">
            <summary>
            Class defining a set of named spatial relationship operators for geometric shape objects.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Contains(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if otherGeometry is wholly contained within the source geometry. This is the same as
            reversing the primary and comparison shapes of the Within operation
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Crosses(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if the intersection of the two geometries results in a geometry whose dimension is less than
            the maximum dimension of the two geometries and the intersection geometry is not equal to either
            geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Disjoint(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if otherGeometry is disjoint from the source geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Equals(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if otherGeometry is of the same type and defines the same point set as the source geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Intersects(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if there is any intersection between the two geometries.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Overlaps(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if the intersection of the two geometries results in an object of the same dimension as the
            input geometries and the intersection geometry is not equal to either geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Touches(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if the only points in common between the two geometries lie in the union of their boundaries.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Within(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns TRUE if the primary geometry is wholly contained within the comparison geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Layers.EcwRasterLayer">
            <summary>
            Class for ECW raster layer properties
            </summary>
        </member>
        <member name="M:SharpMap.Layers.EcwRasterLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new ECW or JPEG2000 based Raster layer
            </summary>
            <param name="strLayerName">Name of layer</param>
            <param name="imageFilename">Location of image</param>
        </member>
        <member name="M:SharpMap.Layers.EcwRasterLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.EcwRasterLayer.Clone">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.EcwRasterLayer.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Layers.EcwRasterLayer.Filename">
            <summary>
            Gets or sets the filename of the raster file
            </summary>
        </member>
        <member name="P:SharpMap.Layers.EcwRasterLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.EcwRasterLayer.LayerType">
            <summary>
            Returns the type of the layer
            </summary>
        </member>
    </members>
</doc>
